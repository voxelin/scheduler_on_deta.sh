import { format, getWeekOfMonth, isWeekend } from "date-fns";
import { utcToZonedTime } from "date-fns-tz";
import { schedule } from "../data/schedule";
import { CustomContext } from "../types/bot";
import { schedule_days_menu, show_schedule } from "../types/menu";
import { SchedulerBot } from "./bot";
import { CommandHandlerError } from "./errors";
export class CommandHandler<C extends CustomContext = CustomContext> {
    constructor(private readonly sysHandlers: SystemHandler<C>) {}
    private localdate = utcToZonedTime(new Date(), "Europe/Kiev");
    public async start(ctx: C) {
        await ctx.reply("–ü—Ä–∞—Ü—é—é –Ω–∞ –±–ª–∞–≥–æ —É—á–Ω—ñ–≤ –ª—ñ—Ü–µ—é ü§ñ\n–ê–≤—Ç–æ—Ä: @voxelin", { parse_mode: "Markdown" });
    }
    public async help(ctx: C) {
        await ctx.reply("–Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º–∏ –∑ —Ä–æ–±–æ—Ç–æ—é –±–æ—Ç–∞, –ø–æ–≤—ñ–¥–æ–º—Ç–µ @voxelin üôÇ");
    }
    public async about(ctx: C) {
        await ctx.reply(
            "–¶–µ–π –±–æ—Ç –±—É–≤ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è –∑—Ä—É—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ä–æ–∑–∫–ª–∞–¥—É –∑–∞–Ω—è—Ç—å —Ç–∞ –ø–æ—Å–∏–ª–∞–Ω—å –Ω–∞ –∑–∞–Ω—è—Ç—Ç—è.\n" +
                "–†–æ–∑—Ä–æ–±–Ω–∏–∫: @voxelin",
        );
    }
    public async link(ctx: C) {
        if (isWeekend(this.localdate)) {
            return await ctx.reply("–°—å–æ–≥–æ–¥–Ω—ñ –≤–∏—Ö—ñ–¥–Ω–∏–π ü•≥");
        }
        const _d = await this.sysHandlers.handleLink(true);
        const { urls, next } = _d;
        let { name } = _d;
        if (Object.keys(_d).length === 0) return ctx.reply("–£—Ä–æ–∫–∏ –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—å, –≤—ñ–¥–ø–æ—á–∏–≤–∞–π—Ç–µ! ü´Ç");
        const oddWeek = getWeekOfMonth(this.localdate) % 2;
        switch (name) {
            case "üé® –ú–∏—Å—Ç–µ—Ü—Ç–≤–æ | üìú –û—Å–Ω–æ–≤–∏ –∑–¥–æ—Ä–æ–≤'—è":
                if (oddWeek == 1) {
                    name = "üìú –û—Å–Ω–æ–≤–∏ –∑–¥–æ—Ä–æ–≤'—è";
                } else {
                    name = "üé® –ú–∏—Å—Ç–µ—Ü—Ç–≤–æ";
                }
                break;
            case "üåç –ì–µ–æ–≥—Ä–∞—Ñ—ñ—è | üìú –Ü—Å—Ç–æ—Ä—ñ—è –£–∫—Ä–∞—ó–Ω–∏":
                if (oddWeek == 1) {
                    name = "üìú –Ü—Å—Ç–æ—Ä—ñ—è –£–∫—Ä–∞—ó–Ω–∏";
                } else {
                    name = "üåç –ì–µ–æ–≥—Ä–∞—Ñ—ñ—è";
                }
                break;
            case "üìö –ê–Ω–≥–ª—ñ–π—Å—å–∫–∞":
                urls![0] = `1. <a href="${urls![0]}">–ß–µ–ø—É—Ä–Ω–∞</a>\n2. <a href="${urls![1]}">–î—É–Ω—å–∫–æ</a>`;
                break;
            case "üíª –Ü–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞":
                urls![0] = `1. <a href="${urls![0]}">–ë–µ–¥–Ω–∞—Ä</a>\n2. <a href="${urls![1]}">–®–µ—Ä–µ–º–µ—Ç</a>`;
                break;
            default:
                break;
        }
        if (urls?.length != 0) {
            next == true
                ? await ctx.reply(`–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —É—Ä–æ–∫: <b>${name}</b> \n${urls![0]}`)
                : await ctx.reply(`–£—Ä–æ–∫ <b>${name}</b> –≤–∂–µ –ø–æ—á–∞–≤—Å—è: \n${urls![0]}`);
        } else {
            await ctx.reply("–ù–∞ –∂–∞–ª—å, –Ω–∞ —É—Ä–æ–∫ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–µ–º–∞—î. ü§î");
        }
    }

    public async schedule(ctx: C) {
        await ctx.reply(show_schedule(format(this.localdate, "EEEE")), {
            parse_mode: "Markdown",
            reply_markup: schedule_days_menu,
            disable_web_page_preview: true,
        });
    }
}

export class SystemHandler<C extends CustomContext> {
    public localdate = utcToZonedTime(new Date(), "Europe/Kiev");
    constructor(private readonly bot: SchedulerBot<C>, private readonly commands?: CommandHandler<C>) {
        this.commands = new CommandHandler<C>(this);
    }

    public async handleLink(manual = false) {
        const day = format(this.localdate, "EEEE");
        const time = format(this.localdate, "HH:mm");
        let _next = false;
        let _name = "";
        let _urls: string[] = [];
        let _sent = false;
        if (!isWeekend(this.localdate)) {
            for (let i = 0; i < schedule[day].length; i++) {
                if (time >= schedule[day][schedule[day].length - 1].end) {
                    return {};
                }
                if (manual) {
                    if (time >= schedule[day][i].start && time <= schedule[day][i].end) {
                        _sent = schedule[day][i].sent ?? false;
                        _urls = schedule[day][i].urls;
                        _name = schedule[day][i].name;
                        schedule[day][i].sent = true;
                        break;
                    }
                    if (time >= schedule[day][i].end && time <= schedule[day][i + 1].start) {
                        _sent = schedule[day][i + 1].sent ?? false;
                        _urls = schedule[day][i + 1].urls;
                        _name = schedule[day][i + 1].name;
                        _next = true;
                        schedule[day][i + 1].sent = true;
                        break;
                    }
                } else {
                    if (time >= schedule[day][i].start && time <= schedule[day][i].end && !schedule[day][i].sent) {
                        _sent = schedule[day][i].sent ?? false;
                        _urls = schedule[day][i].urls;
                        _name = schedule[day][i].name;
                        schedule[day][i].sent = true;
                        break;
                    }
                }
            }
        } else {
            return {};
        }
        return { urls: _urls, name: _name, next: _next, sent: _sent };
    }

    public async handleCommand(ctx: C, command?: string) {
        if (!command) throw new CommandHandlerError("Command is undefined");
        if (command.startsWith("/")) command = command.slice(1);
        if (command.includes("@")) {
            const [cmd, bot] = command.split("@");
            if (bot !== this.bot.botInfo.username) return;
            try {
                return await this.commands![cmd as keyof CommandHandler](ctx);
            } catch (e) {
                if (e instanceof TypeError) {
                    return;
                } else if (e instanceof CommandHandlerError) {
                    await ctx.reply("–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏. –ü–æ–≤—ñ–¥–æ–º—Ç–µ @voxelin üôÇ");
                } else {
                    console.error(e);
                }
            }
        } else {
            try {
                return await this.commands![command as keyof CommandHandler](ctx);
            } catch (e) {
                if (e instanceof TypeError) {
                    return;
                } else if (e instanceof CommandHandlerError) {
                    await ctx.reply("–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏. –ü–æ–≤—ñ–¥–æ–º—Ç–µ @voxelin üôÇ");
                } else {
                    console.error(e);
                }
            }
        }
    }

    public async handleCron() {
        const day = format(this.localdate, "EEEE");
        const time = format(this.localdate, "HH:mm");
        const oddWeek = getWeekOfMonth(this.localdate) % 2;
        const gid = process.env.GROUP_ID!;
        const data = schedule[day];
        if (data == undefined) return;
        let item = data[1];
        for (let i = 0; i < data.length; i++) {
            if (time >= data[i].start && time <= data[i].end) {
                item = data[i];
            }
        }
        const [start, end] = [item["start"], item["end"]];
        const [name, urls] = [item["name"], item["urls"]];
        if (time >= start && time <= end && !item.sent) {
            item.sent = true;
            if (urls.length == 0) return;
            if (urls.length == 1) {
                await this.bot.api.sendMessage(gid, `<b>–ü–æ—á–∏–Ω–∞—î—Ç—å—Å—è —É—Ä–æ–∫</b> <code>${name}</code> \n${urls[0]}`, {
                    parse_mode: "HTML",
                    disable_web_page_preview: true,
                });
            }
            if (urls.length == 2) {
                switch (name) {
                    case "üìö –ê–Ω–≥–ª—ñ–π—Å—å–∫–∞":
                        await this.bot.api.sendMessage(
                            gid,
                            `<b>–ü–æ—á–∏–Ω–∞—î—Ç—å—Å—è —É—Ä–æ–∫</b> <code>${name}</code> \n1. <a href="${urls[0]}">–ß–µ–ø—É—Ä–Ω–∞</a>\n2. <a href="${urls[1]}">–î—É–Ω—å–∫–æ</a>`,
                            { disable_web_page_preview: true, parse_mode: "HTML" },
                        );
                        break;
                    case "üíª –Ü–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞":
                        await this.bot.api.sendMessage(
                            gid,
                            `<b>–ü–æ—á–∏–Ω–∞—î—Ç—å—Å—è —É—Ä–æ–∫</b> <code>${name}</code> \n1. <a href="${urls[0]}">–ë–µ–¥–Ω–∞—Ä</a>\n2. <a href="${urls[1]}">–®–µ—Ä–µ–º–µ—Ç</a>`,
                            { disable_web_page_preview: true, parse_mode: "HTML" },
                        );
                        break;
                    case "üé® –ú–∏—Å—Ç–µ—Ü—Ç–≤–æ | üìú –û—Å–Ω–æ–≤–∏ –∑–¥–æ—Ä–æ–≤'—è":
                        if (oddWeek == 1) {
                            await this.bot.api.sendMessage(
                                gid,
                                `<b>–ü–æ—á–∏–Ω–∞—î—Ç—å—Å—è —É—Ä–æ–∫</b> <code>üìú –û—Å–Ω–æ–≤–∏ –∑–¥–æ—Ä–æ–≤'—è</code> \n${urls[1]}`,
                                {
                                    disable_web_page_preview: true,
                                    parse_mode: "HTML",
                                },
                            );
                        } else {
                            await this.bot.api.sendMessage(
                                gid,
                                `<b>–ü–æ—á–∏–Ω–∞—î—Ç—å—Å—è —É—Ä–æ–∫</b> <code>üé® –ú–∏—Å—Ç–µ—Ü—Ç–≤–æ</code> \n${urls[0]}`,
                                {
                                    disable_web_page_preview: true,
                                    parse_mode: "HTML",
                                },
                            );
                        }
                        break;
                    case "üåç –ì–µ–æ–≥—Ä–∞—Ñ—ñ—è | üìú –Ü—Å—Ç–æ—Ä—ñ—è –£–∫—Ä–∞—ó–Ω–∏":
                        if (oddWeek == 1) {
                            await this.bot.api.sendMessage(
                                gid,
                                `<b>–ü–æ—á–∏–Ω–∞—î—Ç—å—Å—è —É—Ä–æ–∫</b> <code>üìú –Ü—Å—Ç–æ—Ä—ñ—è –£–∫—Ä–∞—ó–Ω–∏</code> \n${urls[1]}`,
                                {
                                    disable_web_page_preview: true,
                                    parse_mode: "HTML",
                                },
                            );
                        } else {
                            await this.bot.api.sendMessage(
                                gid,
                                `<b>–ü–æ—á–∏–Ω–∞—î—Ç—å—Å—è —É—Ä–æ–∫</b> <code>üåç –ì–µ–æ–≥—Ä–∞—Ñ—ñ—è</code> \n${urls[0]}`,
                                {
                                    disable_web_page_preview: true,
                                    parse_mode: "HTML",
                                },
                            );
                        }
                        break;
                }
            }
        }
    }
}
