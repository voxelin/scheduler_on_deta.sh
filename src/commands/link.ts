import { getWeekOfMonth, isWeekend } from "date-fns";
import { utcToZonedTime } from "date-fns-tz";
import { SystemHandler } from "../core/handler";
import * as def from "../core/imports";

export default {
    command: "link",
    description: "–î—ñ–∑–Ω–∞—Ç–∏—Å—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π/—Ç–µ–ø–µ—Ä—ñ—à–Ω—ñ–π —É—Ä–æ–∫.",
    in_list: true,
    run: async (ctx: def.Context) => {
        const date = utcToZonedTime(new Date(), "Europe/Kiev");
        if (isWeekend(date)) {
            return await ctx.reply("–°—å–æ–≥–æ–¥–Ω—ñ –≤–∏—Ö—ñ–¥–Ω–∏–π ü•≥");
        }
        const _d = await new SystemHandler(def.bot).handleLink();
        const { urls, next } = _d;
        let { name } = _d;
        if (Object.keys(_d).length === 0) return ctx.reply("–£—Ä–æ–∫–∏ –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—å, –≤—ñ–¥–ø–æ—á–∏–≤–∞–π—Ç–µ! ü´Ç");
        const oddWeek = getWeekOfMonth(date) % 2;
        switch (name) {
            case "üé® –ú–∏—Å—Ç–µ—Ü—Ç–≤–æ | üìú –û—Å–Ω–æ–≤–∏ –∑–¥–æ—Ä–æ–≤'—è":
                if (oddWeek == 0) {
                    name = "üìú –û—Å–Ω–æ–≤–∏ –∑–¥–æ—Ä–æ–≤'—è";
                } else {
                    name = "üé® –ú–∏—Å—Ç–µ—Ü—Ç–≤–æ";
                }
                break;
            case "üåç –ì–µ–æ–≥—Ä–∞—Ñ—ñ—è | üìú –Ü—Å—Ç–æ—Ä—ñ—è –£–∫—Ä–∞—ó–Ω–∏":
                if (oddWeek == 0) {
                    name = "üìú –Ü—Å—Ç–æ—Ä—ñ—è –£–∫—Ä–∞—ó–Ω–∏";
                } else {
                    name = "üåç –ì–µ–æ–≥—Ä–∞—Ñ—ñ—è";
                }
                break;
            case "üìö –ê–Ω–≥–ª—ñ–π—Å—å–∫–∞":
                urls![0] = `1. <a href="${urls![0]}">–ß–µ–ø—É—Ä–Ω–∞</a>\n2. <a href="${urls![1]}">–î—É–Ω—å–∫–æ</a>`;
                break;
            case "üíª –Ü–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞":
                urls![0] = `1. <a href="${urls![0]}">–ë–µ–¥–Ω–∞—Ä</a>\n2. <a href="${urls![1]}">–®–µ—Ä–µ–º–µ—Ç</a>`;
                break;
            default:
                break;
        }
        if (urls?.length != 0) {
            next == true
                ? await ctx.reply(`–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —É—Ä–æ–∫: <b>${name}</b> \n${urls![0]}`)
                : await ctx.reply(`–£—Ä–æ–∫ <b>${name}</b> –≤–∂–µ –ø–æ—á–∞–≤—Å—è: \n${urls![0]}`);
        } else {
            await ctx.reply("–ù–∞ –∂–∞–ª—å, –Ω–∞ —É—Ä–æ–∫ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–µ–º–∞—î. ü§î");
        }
    },
};
