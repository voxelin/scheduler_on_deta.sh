import * as def from "../core/imports";

export default {
    name: "drop",
    description: "[–£–ü–û–í–ù–û–í–ê–ñ–ï–ù–Ü] –ü–µ—Ä–µ–ø—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ –≤–µ–±—Ö—É–∫.",
    aliases: [],
    in_list: false,
    run: async (ctx: def.Context) => {
        if (![1024118111, 1260609189, 953390376, 1220615061, 5187696616, 1888411613].includes(ctx.from!.id))
            return ctx.reply("–¢—ñ–ª—å–∫–∏ —É–ø–æ–≤–Ω–æ–≤–∞–∂–µ–Ω–∏–π –º–æ–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü—é –∫–æ–º–∞–Ω–¥—É ü§ñ");
        if (!def.DevCheckQuery) {
            if ((await def.bot.api.getWebhookInfo()).url !== "") {
                await ctx.reply("–í–∏–¥–∞–ª–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞...");
                await def.bot.api.deleteWebhook({ drop_pending_updates: true });
                await ctx.reply("–í–µ–±—Ö—É–∫ –≤–∏–¥–∞–ª–µ–Ω–æ.");
            } else {
                await ctx.reply("–í–µ–±—Ö—É–∫ –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–æ. –ü—Ä–æ–ø—É—Å–∫...");
            }
            if (process.env.WEBHOOK_URL) {
                await ctx.reply("–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞...");
                await def.bot.api.setWebhook(process.env.WEBHOOK_URL);
                await ctx.reply("–í–µ–±—Ö—É–∫ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω—å...");
            }
        } else {
            return ctx.reply("–í–∏ –≤ —Ä–µ–∂–∏–º—ñ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è. –í–µ–±—Ö—É–∫ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.");
        }
    },
};
